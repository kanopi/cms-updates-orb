description: >
  Run Content Management System (CMS) updates on Drupal and WordPress.
executor:
  name: '<<parameters.site-hosting>>'
  php-version: '<<parameters.php-version>>'
parameters:
  php-version:
    description: "Tag used for PHP version. Image: cimg/php"
    type: enum
    enum: ['7.4', '8.0', '8.1', '8.2']
    default: '8.1'
  cms:
    description: "Type of CMS to run updates on."
    type: enum
    enum: ["drupal", "drupal7", "wordpress"]
  repo:
    description: "The url to use for cloning the repo"
    type: string
    default: "${CIRCLE_REPOSITORY_URL}"
  pr-branch:
    description: "What is the main branch of the project that should be used."
    type: string
    default: "${CIRCLE_BRANCH}"
  docroot:
    description: "Where is the DOCROOT of the project?"
    type: string
    default: '.'
  update-branch:
    description: "The name of the branch to run updates with."
    type: string
    default: "automated/cms-updates"
  site-hosting:
    description: "What hosting is the site using?"
    type: enum
    enum: ["general", "pantheon", "wpengine"]
    default: "general"
  site-id:
    description: "The site name on the remote host to pull information from"
    type: string
    default: ""
  site-env:
    description: "The environment on the remote host to pull information from."
    type: string
    default: ""
  is-multisite:
    description: "Is this site a multi-site."
    type: boolean
    default: false
  multisite-subdomains:
    description: "Is the WordPress multisite a subdomains multisite?"
    type: boolean
    default: false
  db-type:
    description: "What is the method for pulling the database."
    type: enum
    enum: ["custom", "drush", "wpcli"]
    default: "custom"
  table-prefix:
    description: "The table prefix to use. Primarily used for WordPress configuration."
    type: string
    default: "wp_"
  update-method:
    description: "The update-method used for running updates."
    type: enum
    enum: ["composer", "drush", "wpcli"]
  update-message:
    description: "Commit message used for changed items."
    type: string
    default: 'Automated Updated'
  git-name:
    description: "The name to use for commits"
    type: string
    default: "${GIT_NAME}"
  git-email:
    description: "The email to use for commits"
    type: string
    default: "${GIT_EMAIL}"
  composer-version:
    description: "Version of composer to use. Default 2.x"
    type: enum
    default: '2'
    enum: ['1', '2']
  run-local:
    type: boolean
    default: false
  cms-updates-config-repo:
    description: 'The repo to pull down from the configuration.'
    type: string
    default: 'git@github.com:kanopi/cms-updates'
  cms-updates-version:
    default: 'main'
    description: 'Version of CMS Update Script to download.'
    type: string
  exclude-pr:
    default: false
    description: "Exclude PR from the Process"
    type: boolean
  skip-pr-if-opened:
    default: false
    description: "Cancel the step if there is a PR already opened"
    type: boolean
  resource-class:
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium+
    description: The resource class to use for the job.
resource_class: <<parameters.resource-class>>
steps:
  # Add SSH Key
  - ci-tools/copy-ssh-key:
      decode-params: '-di'
  # Configure Git Client
  - run:
      name: Configure Git Client
      command: |
        if [ -z "<<parameters.git-name>>" ] || [ -z "<<parameters.git-email>>" ]; then
            # No user name or email set, default to CIRCLE_USERNAME-based identifiers
            git config --global user.name "$CIRCLE_USERNAME"
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
        else
            git config --global user.name "<<parameters.git-name>>"
            git config --global user.email "<<parameters.git-email>>"
        fi
  # Install Tools
  - ci-tools/install-github-cli
  - when:
      condition:
        and:
          - <<parameters.skip-pr-if-opened>>
          - not: <<parameters.exclude-pr>>
      steps:
        - run:
            name: Check if PR Created
            command: |
              ID=$(gh pr list --repo='<<parameters.repo>>' --head <<parameters.update-branch>> --json 'number' --jq '.[].number')

              if [[ "${ID}" != "" ]]; then
                  circleci-agent step halt
              fi
  - when:
      condition:
        or:
          - equal: ["drupal7", <<parameters.cms>>]
          - equal: ["drupal", <<parameters.cms>>]
      steps:
        - ci-tools/install-drush
  - when:
      condition:
        equal: ["wordpress", <<parameters.cms>>]
      steps:
        - ci-tools/install-wpcli
  # Checkout Project
  - run-step:
      hook: 'checkout'
      steps:
        - run:
            name: Checkout Project
            command: git clone <<parameters.repo>> .
        - run:
            name: Checkout Update Branch
            command: git checkout -B <<parameters.update-branch>>
        - run:
            name: Checkout Branch to Main Branch
            command: git reset --hard origin/<<parameters.pr-branch>>
  # Start PHP Server
  - run-step:
      hook: 'start'
      steps:
        - run:
            name: Install related tools
            command: |
              sudo apt update >/dev/null;
              sudo apt install -y --no-install-recommends >/dev/null \
                mysql-client \
                pv \
                rsync
        - when:
            condition:
              equal: ["pantheon", <<parameters.site-hosting>>]
            steps:
              - run:
                  name: Install PHP Packages
                  command: |
                    sudo pecl update-channels
                    sudo pecl install >/dev/null </dev/null \
                      redis
              - copy-config-file:
                  title: pantheon.ini
                  contents: <<include(config/hosting/pantheon/pantheon.ini)>>
                  file: /etc/php.d/pantheon.ini
              - copy-config-file:
                  title: prepend.php
                  contents: <<include(config/hosting/pantheon/prepend.php)>>
                  file: /home/circleci/config/hosting/pantheon/prepend.php
        - when:
            condition:
              equal: ["wpengine", <<parameters.site-hosting>>]
            steps:
              # Should I run a check on this to see if necessary?
              - install-wp-core
              - run:
                  environment:
                    TABLE_PREFIX: <<parameters.table-prefix>>
                  name: Setup WPConfig
                  command: |
                    wp config create \
                      --dbname="${DB_NAME}" \
                      --dbuser="${DB_USER}" \
                      --dbpass="${DB_PASS}" \
                      --dbhost="${DB_HOST}" \
                      --dbprefix="${TABLE_PREFIX}"
        - run:
            name: Start PHP Server
            command: php -S 0.0.0.0:80
            background: true
            path: <<parameters.docroot>>
  # Pull Database From Remote
  - run-step:
      hook: 'pull-db'
      steps:
        - when:
            condition:
              equal: ["pantheon", <<parameters.site-hosting>>]
            steps:
              - pull-db-pantheon:
                  site-id: '<<parameters.site-id>>'
                  site-env: '<<parameters.site-env>>'
        - when:
            condition:
              equal: ["acquia", <<parameters.site-hosting>>]
            steps:
              - pull-db-acquia:
                  site-id: '<<parameters.site-id>>'
                  site-env: '<<parameters.site-env>>'
        - when:
            condition:
              equal: ["wpengine", <<parameters.site-hosting>>]
            steps:
              - pull-db-wpengine:
                  site-id: '<<parameters.site-id>>'
              - when:
                  condition: <<parameters.is-multisite>>
                  steps:
                    - run:
                        name: Convert to Multi Site
                        command: |
                          wp core multisite-convert <<# parameters.multisite-subdomains >>--subdomains<</ parameters.multisite-subdomains >>
        - when:
            condition:
              equal: ["general", <<parameters.site-hosting>>]
            steps:
              - when:
                  condition:
                    equal: ["drush", <<parameters.db-type>>]
                  steps:
                    - pull-db-drush:
                        site-id: '<<parameters.site-id>>'
                        site-env: '<<parameters.site-env>>'
              - when:
                  condition:
                    equal: ["wpcli", <<parameters.db-type>>]
                  steps:
                    - pull-db-wpcli:
                        site-id: '<<parameters.site-id>>'
                        site-env: '<<parameters.site-env>>'
  # Run Updates on CMS
  - when:
      condition:
        equal: ["drupal7", <<parameters.cms>>]
      steps:
        # For Pantheon Drupal 7 using Drush to update. Use Pantheon's Drop-7.
        - when:
            condition:
              and:
                - equal: ["pantheon", <<parameters.site-hosting>>]
                - equal: ["drush", <<parameters.update-method>>]
            steps:
              - run:
                  name: Get the Pantheon Web Files
                  command: |
                    git clone https://github.com/pantheon-systems/drops-7 /tmp/drops-7
                    cd <<parameters.docroot>>
                    rsync -avz /tmp/drops-7/* ./
        - run-step:
            hook: 'update'
            steps:
              - run-update:
                  cms: 'drupal7'
                  update-method: <<parameters.update-method>>
                  docroot: <<parameters.docroot>>
                  composer-version: <<parameters.composer-version>>
  - when:
      condition:
        equal: ["drupal", <<parameters.cms>>]
      steps:
        - run-step:
            hook: 'update'
            steps:
              - run-update:
                  cms: 'drupal'
                  update-method: <<parameters.update-method>>
                  docroot: <<parameters.docroot>>
                  composer-version: <<parameters.composer-version>>
  - when:
      condition:
        equal: ["wordpress", <<parameters.cms>>]
      steps:
        - run-step:
            hook: 'update'
            steps:
              - run-update:
                  cms: 'wordpress'
                  update-method: <<parameters.update-method>>
                  docroot: <<parameters.docroot>>
                  composer-version: <<parameters.composer-version>>
  # Commit Changes
  - run-step:
      hook: 'commit'
      steps:
        - run:
            name: Ignore File Mode
            command: git config core.filemode false
        - run:
            name: Git Status
            command: git status
        - run:
            name: Check Status
            command: <<include(scripts/check-status.sh)>>
        - run:
            name: Git Add
            command: git add .
        - run:
            name: Git Commit
            command: git commit -m "<<parameters.update-message>>"
  # Push Changes to Remote Hosting
  - run-step:
      hook: 'push'
      steps:
        - run:
            name: Push to Github
            command: git push -f origin <<parameters.update-branch>>
            # @Todo: Create Task in Teamwork
            # @Todo: Create Entry in Harvest
  # Create Pull Request In Remote
  - unless:
      condition: <<parameters.exclude-pr>>
      steps:
        - run-step:
            hook: 'create-pr'
            steps:
              - run:
                  name: Create/Update PR In Github
                  command: |
                    set -xe

                    ID=$(gh pr list --head <<parameters.update-branch>> --json 'number' --jq '.[].number')

                    echo "ID Found: ${ID}"

                    if [[ "${ID}" == "" ]]; then
                      gh pr create \
                        --base <<parameters.pr-branch>> \
                        --title "Automated Updates" \
                        --body-file /tmp/output.md
                    else
                      gh pr edit ${ID} \
                        --body-file /tmp/output.md
                    fi
