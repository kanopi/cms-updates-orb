version: 2.1

###########
### Reusable Variables
###########
executor: &executor
  type: string
site: &site
  type: string
cms: &cms
  type: string
repo: &repo
  type: string
pr-branch: &pr-branch
  type: string
db-type: &db-type
  type: string
docroot: &docroot
  type: string
site-hosting: &site-hosting
  type: string
site-id: &site-id
  type: string
site-env: &site-env
  type: string
steps: &steps
  type: steps
  default: []
hook: &hook
  type: string
update-branch: &update-branch
  type: string
  default: "feature/updates"
path: &path
  type: string
  default: "project-update"
update: &update
  type: steps
  default: []
commit: &commit
  type: steps
  default: []
push: &push
  type: steps
  default: []
db-file: &db-file
  type: string
  default: "/tmp/db.sql.gz"
db-host: &db-host
  type: string
  default: 'db'
db-user: &db-user
  type: string
  default: 'user'
db-pass: &db-pass
  type: string
  default: 'user'
db-name: &db-name
  type: string
  default: 'default'
method: &method
  type: string
  default: ''

default-params: &default-params
  site: *site
  path: *path
  cms: *cms
  repo: *repo
  pr-branch: *pr-branch
  db-type: *db-type
  docroot: *docroot
  update-branch: *update-branch
  site-hosting: *site-hosting
  site-id: *site-id
  site-env: *site-env
  method: *method

params: &params
  path: '<<parameters.path>>'
  site: '<<parameters.site>>'
  cms: '<<parameters.cms>>'
  repo: '<<parameters.repo>>'
  pr-branch: '<<parameters.pr-branch>>'
  db-type: '<<parameters.db-type>>'
  docroot: '<<parameters.docroot>>'
  update-branch: '<<parameters.update-branch>>'
  site-hosting: '<<parameters.site-hosting>>'
  site-id: '<<parameters.site-id>>'
  site-env: '<<parameters.site-env>>'
  method: '<<parameters.method>>'

pipeline-params: &pipeline-params
  site: '<<pipeline.parameters.site>>'
  cms: '<<pipeline.parameters.cms>>'
  repo: '<<pipeline.parameters.repo>>'
  pr-branch: '<<pipeline.parameters.pr-branch>>'
  db-type: '<<pipeline.parameters.db-type>>'
  docroot: '<<pipeline.parameters.docroot>>'
  update-branch: '<<pipeline.parameters.update-branch>>'
  site-hosting: '<<pipeline.parameters.site-hosting>>'
  site-id: '<<pipeline.parameters.site-id>>'
  site-env: '<<pipeline.parameters.site-env>>'
  method: '<<pipeline.parameters.method>>'

db-env-vars: &db-env-vars
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: default
  MYSQL_USER: user
  MYSQL_PASSWORD: user

php-version: &php-version
  type: string
  default: '7.4'
db-version: &db-version
  type: string
  default: '10.4'
redis-version: &redis-version
  type: string
  default: '5-alpine'
solr-version: &solr-version
  type: string
  default: '8-slim'
memcache-version: &memcache-version
  type: string
  default: 'alpine'

###########
### Pipeline Configuration
###########
parameters:
  run_update:
    description: 'Allow the updates to be ran.'
    type: boolean
    default: true
  executor: 
    <<: *executor
    default: 'custom/pantheon'
  site:
    <<: *site
    default: 'coit-8'
  cms:
    <<: *cms
    default: 'drupal8'
  repo:
    <<: *repo
    default: 'git@github.com:kanopi/coit-8'
  pr-branch:
    <<: *pr-branch
    default: 'master'
  db-type:
    <<: *db-type
    default: 'pantheon'
  docroot: 
    <<: *docroot
    default: 'web'
  update-branch:
    <<: *update-branch
    default: 'feature/updates'
  site-hosting: 
    <<: *site-hosting
    default: 'pantheon'
  site-id:
    <<: *site-id
    default: 'coit-main'
  site-env: 
    <<: *site-env
    default: 'live'
  method:
    <<: *method
    default: 'composer'

###########
### Custom Orbs
###########
orbs:
  custom:
    orbs:
      ci-tools: kanopi/ci-tools@1.7.1
    commands:
      ## Install Tools for Specific CMS
      install-tools:
        description: >
          Install Necessary Tools
        parameters:
          cms: *cms
        steps:
          - ci-tools/install-github-cli
          - when:
              condition:
                or:
                  - equal: ["drupal7", <<parameters.cms>>]
                  - equal: ["drupal8", <<parameters.cms>>]
                  - equal: ["drupal9", <<parameters.cms>>]
                  - equal: ["drupal", <<parameters.cms>>]
              steps:
                - ci-tools/install-drush
          - when:
              condition:
                equal: ["wordpress", <<parameters.cms>>]
              steps:
                - ci-tools/install-wpcli  

      ## Run Hook
      run-hook:
        description: >
          Hook command to run at a particular point in the process
        parameters:
          path: *path
          hook: *hook
        steps:
          - run:
              name: Running Hook <<parameters.hook>>
              command: |
               ( [[ -f .updates/<<parameters.hook>> ]] && .updates/<<parameters.hook>> ) || true
              path: <<parameters.path>>      

      ## Checkout Project
      checkout-project:
        description: >
          Used for checking out the project
        parameters:
          repo: *repo
          path: *path
          update-branch: *update-branch
        steps:
          - run:
              name: Temp Fix for SSH Key
              command: |
                echo 'IdentityFile ~/.ssh/development_key' >> ~/.ssh/config
          - run:
              name: Checkout Project
              command: git clone <<parameters.repo>> <<parameters.path>>
          - run:
              name: Checkout Update Branch
              command: git checkout -B <<parameters.update-branch>>
              path: <<parameters.path>>

      ## Run Step
      run-step:
        description: >
          Abstract command to run steps with hook integration.
        parameters:
          hook: *hook
          steps: *steps
          path: *path
        steps:
          - run-hook:
              hook: 'pre-<<parameters.hook>>'
              path: <<parameters.path>>
          - steps: << parameters.steps >>
          - run-hook:
              hook: 'post-<<parameters.hook>>'
              path: <<parameters.path>>              

      ## Start PHP Server
      start-php-server:
        description: >
          Start PHP Server
        parameters:
          path: *path
          docroot: *docroot
        steps:
          - run:
              name: Start PHP Server
              command: php -S 0.0.0.0:80
              background: true
              path: "<<parameters.path>>/<<parameters.docroot>>"

      ## Update Project
      update-project:
        description: >
          Command to run updates on project
        parameters:
          <<: *default-params
          commit: *commit
          push: *push
        steps:
          - install-tools:
              cms: <<parameters.cms>>
          - run-step:
              path: <<parameters.path>>
              hook: 'checkout'
              steps:
                - checkout-project:
                    repo: <<parameters.repo>>
                    path: <<parameters.path>>
                    update-branch: <<parameters.update-branch>>
          - run-step:
              path: <<parameters.path>>
              hook: 'start'
              steps:
                - run-setup:
                    site-hosting: <<parameters.site-hosting>>
                - start-php-server:
                    path: <<parameters.path>>
                    docroot: <<parameters.docroot>>
          - run-step:
              path: <<parameters.path>>
              hook: 'db'
              steps:
                - pull-db:
                    <<: *params
          - run-step:
              path: <<parameters.path>>
              hook: 'update'
              steps:
                - run-update:
                    cms: <<parameters.cms>>
                    path: <<parameters.path>>
                    method: <<parameters.method>>
          - run-step:
              path: <<parameters.path>>
              hook: 'commit'
              steps: <<parameters.commit>>
          - run-step:
              path: <<parameters.path>>
              hook: 'push'
              steps: <<parameters.push>>
              # To DO: Run command to Create PR

      #############
      ## Clear Cache on Site
      #############

      clear-cache-drush:
        parameters:
          cms: *cms
          path: *path
        steps:
          - when:
              condition:
                equal: ["drupal7", <<parameters.cms>>]
              steps:
                - run:
                    name: Drush Clear Cache
                    command: drush cc all
                    path: <<parameters.path>>
          - unless:
              condition:
                equal: ["drupal7", <<parameters.cms>>]
              steps:
                - run:
                    name: Drush Cache Rebuild
                    command: drush cr
                    path: <<parameters.path>>

      clear-cache-wpcli:
        parameters:
          path: *path
        steps:
          - run:
              name: WPCLI Clear Cache
              command: wp cache clear
              path: <<parameters.path>>
          - run:
              name: WPCLI Transient Delete
              command: wp transient delete --all
              path: <<parameters.path>>

      clear-cache:
        parameters:
          cms: *cms
          path: *path
        steps:
          - when:
              condition:
                or:
                  - equal: ["drupal", <<parameters.cms>>]
                  - equal: ["drupal8", <<parameters.cms>>]
                  - equal: ["drupal9", <<parameters.cms>>]
              steps:
                - clear-cache-drush:
                    cms: <<parameters.cms>>
                    path: <<parameters.path>>
          - when:
              condition:
                equal: ["wordpress", <<parameters.cms>>]
              steps:
                - clear-cache-wpcli:
                    path: <<parameters.path>>

      #############
      ## Run Updates using a specific Method
      #############

      ## Run Update with Drush
      run-update-drush:
        parameters:
          path: *path
        steps:
          - run:
              name: Run Drush Update
              command: drush up -y
              path: <<parameters.path>>

      ## Run Update with WPCLI
      run-update-wpcli:
        parameters:
          path: *path
        steps:
          - run:
              name: Run WPCLI Update
              command: wp 
              path: <<parameters.path>>

      ## Run Update with Composer
      run-update-composer:
        parameters:
          path: *path
        steps:
          - run:
              name: Run Composer Update
              command: composer update -W --optimize-autoloader
              path: <<parameters.path>>

      ## Run Update Steps
      run-update:
        parameters:
          cms: *cms
          method: *method
          path: *path
        steps:
          - when:
              condition:
                equal: ["drush", <<parameters.method>>]
              steps:
                - clear-cache-drush:
                    path: <<parameters.path>>
                    cms: <<parameters.cms>>
                - run-update-drush:
                    path: <<parameters.path>>
                - clear-cache-drush:
                    path: <<parameters.path>>
                    cms: <<parameters.cms>>
          - when:
              condition:
                equal: ["composer", <<parameters.method>>]
              steps:
                - ci-tools/composer-install:
                    path: <<parameters.path>>
                - clear-cache:
                    path: <<parameters.path>>
                    cms: <<parameters.cms>>
                - run-update-composer:
                    path: <<parameters.path>>
                - when:
                    condition:
                      or:
                        - equal: ["drupal", <<parameters.cms>>]
                        - equal: ["drupal7", <<parameters.cms>>]
                        - equal: ["drupal8", <<parameters.cms>>]
                    steps:
                      - run:
                          name: Drush Export 
                          command: drush cex -y
                          path: <<parameters.path>>
                - clear-cache:
                    path: <<parameters.path>>
                    cms: <<parameters.cms>>
          - when:
              condition:
                equal: ["wpcli", <<parameters.method>>]
              steps:
                - clear-cache-wpcli:
                    path: <<parameters.path>>
                - run-update-wpcli:
                    path: <<parameters.path>>
                - clear-cache-wpcli:
                    path: <<parameters.path>>

      #############
      ## Pull Database From Host
      #############      

      ## Pull DB with Terminus
      pantheon-pull-db:
        description: >
          Command to pull database from Pantheon
        parameters:
          <<: *default-params
          db-file: *db-file
          db-host: *db-host
          db-user: *db-user
          db-pass: *db-pass
          db-name: *db-name
          token:
            type: string
            default: "${TERMINUS_TOKEN}"
        steps:
          - ci-tools/install-terminus
          - run:
              name: Authenticate to Terminus
              command: |
                terminus auth:login --machine-token=<<parameters.token>>
          - run:
              name: Create and Pull Database From Pantheon
              command: |
                terminus backup:create <<parameters.site-id>>.<<parameters.site-env>> --element=db
                terminus backup:get <<parameters.site-id>>.<<parameters.site-env>> --element="db" --to="<<parameters.db-file>>"
                zcat < <<parameters.db-file>> | mysql -h <<parameters.db-host>> -u <<parameters.db-user>> -p<<parameters.db-pass>> <<parameters.db-name>>

      ## Pull DB with Drush
      drush-pull-db:
        description: >
          Use Drush to Pull Database
        parameters:
          <<: *default-params
        steps:
          - run:
              name: Test
              command: echo "Hello"

      ## Pull DB with SSH
      generic-pull-db:
        description: >
          Generally pull database using basic connection
        parameters:
          <<: *default-params
        steps:
          - run:
              name: Test
              command: echo "Hello"

      ## Pull DB with Acquia CLI
      acquia-pull-db:
        description: >
          Used for pulling database from Acquia
        parameters:
          <<: *default-params
        steps:
          - run:
              name: Test
              command: echo "Hello"

      ## Pull DB from WPEngine
      wpengine-pull-db:
        description: >
          Used for pulling database from WP Engine
        parameters:
          <<: *default-params          
        steps:
          - run:
              name: Test
              command: echo "Hello"

      ## Pull DB with WPCli
      wpcli-pull-db:
        description: >
          Use WPCli to Pull Database
        parameters:
          <<: *default-params
        steps:
          - run:
              name: Test
              command: echo "Hello"

      ## Pull DB Entrypoint
      pull-db:
        description: >
          Used to pull the database from a specific place.
        parameters: *default-params
        steps:
          - run:
              name: Install DB related tools
              command: |
                sudo apt update
                sudo apt install mysql-client
          - when:
              condition:
                equal: ["pantheon", <<parameters.db-type>>]
              steps:
                - pantheon-pull-db: *params
          - when:
              condition:
                equal: ["acquia", <<parameters.db-type>>]
              steps:
                - acquia-pull-db: *params
          - when:
              condition:
                equal: ["wpengine", <<parameters.db-type>>]
              steps:
                - wpengine-pull-db: *params
          - when:
              condition:
                equal: ["drush", <<parameters.db-type>>]
              steps:
                - drush-pull-db: *params
          - when:
              condition:
                equal: ["wpcli", <<parameters.db-type>>]
              steps:
                - wpcli-pull-db: *params
          - when:
              condition:
                equal: ["generic", <<parameters.db-type>>]
              steps:
                - generic-pull-db: *params

      #############
      ## Hosting Setup
      #############

      run-setup:
        parameters:
          site-hosting: *site-hosting
        steps:
          - when:
              condition:
                equal: ["pantheon", <<parameters.site-hosting>>]
              steps:
                - run:
                    name: Link Config
                    command: |
                      sudo ln -sf ${CIRCLE_WORKING_DIRECTORY}/config/pantheon/pantheon.ini /etc/php/7.4/cli/conf.d/pantheon.ini

      #############
      ## Update CMS
      ############# 

      ## Update for D7
      update_drupal7:
        description: >
          Run Updates on a Drupal 7 Site
        parameters: *default-params
        steps:
          - update-project: *params

      ## Update for D8/D9
      update_drupal:
        description: >
          Run Updates on a Drupal 8 Site
        parameters: *default-params
        steps:
          - update-project: *params

      ## Update for WordPress
      update_wordpress:
        description: >
          Run Updates on a WordPress Site
        parameters: *default-params
        steps:
          - update-project: *params

      ## Run Update Step
      run-updates:
        description: >
          Run Site Update
        parameters: *default-params
        steps:
          - ci-tools/copy-ssh-key
          - checkout
          - when:
              condition:
                equal: ["drupal7", <<parameters.cms>>]
              steps:
                - update_drupal7: *params
          - when:
              condition:
                or:
                  - equal: ["drupal8", <<parameters.cms>>]
                  - equal: ["drupal9", <<parameters.cms>>]
                  - equal: ["drupal", <<parameters.cms>>]
              steps:
                - update_drupal: *params
          - when:
              condition:
                equal: ["wordpress", <<parameters.cms>>]
              steps:
                - update_wordpress: *params

    executors:
        php-mysql:
          parameters:
            php-version: *php-version
            db-version:
              <<: *db-version
              default: '5.7'
          docker:
            - image: cimg/php:<<parameters.php-version>>
            - image: mysql:<<parameters.db-version>>
              name: db
              environment: *db-env-vars
        acquia:
          parameters:
            php-version: *php-version
            db-version:
              <<: *db-version
              default: '5.7'
            memcache-version: *memcache-version
          docker:
            - image: cimg/php:<<parameters.php-version>>
            - image: mysql:<<parameters.db-version>>
              name: db
              environment: *db-env-vars
            - image: memcached:<<parameters.memcache-version>>
              name: memcached
        pantheon:
          parameters:
            php-version: *php-version
            db-version: 
              <<: *db-version
            redis-version: *redis-version
            solr-version: *solr-version
          docker:
            - image: cimg/php:<<parameters.php-version>>
              environment:
                DB_HOST: db
                DB_PORT: 3306
                DB_NAME: default
                DB_USER: user
                DB_PASS: user
                CACHE_HOST: redis
                CACHE_PORT: 6379
                INDEX_HOST: solr
                INDEX_PORT: 8983
            - image: circleci/redis:<<parameters.redis-version>>
              name: redis
            - image: mariadb:<<parameters.db-version>>
              name: db
              environment: *db-env-vars
            - image: solr:<<parameters.solr-version>>
              name: solr
        wpengine:
          parameters:
            php-version: *php-version
            db-version:
              <<: *db-version
              default: '5.7'
          docker:
            - image: cimg/php:<<parameters.php-version>>
            - image: mysql:<<parameters.db-version>>
              name: db
              environment: *db-env-vars

###########
### Jobs
###########
jobs:
  run_cms_updates:
    executor: <<pipeline.parameters.executor>>
    working_directory: ~/projects
    steps:
      - custom/run-updates: *pipeline-params

###########
### Workflows
###########
workflows:
  version: 2
  cms_update_workflows:
    when: << pipeline.parameters.run_update >>
    jobs:
      - run_cms_updates:
          context: kanopi-code
